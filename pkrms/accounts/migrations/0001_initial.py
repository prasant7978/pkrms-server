# Generated by Django 5.0.3 on 2025-01-28 11:23

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Balai",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Balai Name")),
                (
                    "balai_code",
                    models.BigIntegerField(
                        blank=True, null=True, verbose_name="Balai Code"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PriorityArea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Priority Area Name"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Province",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=10, unique=True, verbose_name="Province Code"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Province Name"),
                ),
                (
                    "default_province",
                    models.BooleanField(default=False, verbose_name="Default Province"),
                ),
                (
                    "stable_network_objective",
                    models.TextField(verbose_name="Stable Network Objective"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role_name",
                    models.CharField(
                        choices=[
                            ("superadmin", "Super Admin"),
                            ("pfid", "PFID"),
                            ("balai_lg", "Balai LG"),
                            ("provience_lg", "Provincial LG"),
                            ("kabupaten_lg", "Kabupaten LG"),
                        ],
                        default="pfid",
                        max_length=20,
                        unique=True,
                        verbose_name="Role",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Traffic_weighting_factors",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("Car_WTI_FACTOR", models.BigIntegerField()),
                ("Car_VDF_Factor", models.BigIntegerField()),
                ("Large_bus_WTI_FACTOR", models.BigIntegerField()),
                ("Large_bus_VDF_Factor", models.BigIntegerField()),
                ("Large_truck_WTI_FACTOR", models.BigIntegerField()),
                ("Large_truck_VDF_Factor", models.BigIntegerField()),
                ("MC_WTI_FACTOR", models.BigIntegerField()),
                ("MC_VDF_Factor", models.BigIntegerField()),
                ("MEDIUM_TRUCK_WTI_FACTOR", models.BigIntegerField()),
                ("MEDIUM_TRUCK_VDF_Factor", models.BigIntegerField()),
                ("Microtruk_WTI_FACTOR", models.BigIntegerField()),
                ("Microtruk_VDF_Factor", models.BigIntegerField()),
                ("Pickup_WTI_FACTOR", models.BigIntegerField()),
                ("Pickup_VDF_Factor", models.BigIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("username", models.CharField(max_length=30, unique=True)),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Full Name"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("approved", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "balai",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.balai",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ApprovalRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Approved", "Approved"),
                            ("Rejected", "Rejected"),
                        ],
                        default="Pending",
                        max_length=20,
                    ),
                ),
                (
                    "approver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pending_approvals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approval_request",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Kabupaten",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Kabupaten Name"),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=10, unique=True, verbose_name="Kabupaten Code"
                    ),
                ),
                (
                    "default_kabupaten",
                    models.BooleanField(
                        default=False, verbose_name="Default Kabupaten"
                    ),
                ),
                (
                    "stable_network_objective",
                    models.TextField(verbose_name="Stable Network Objective"),
                ),
                (
                    "balai",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="kabupatens",
                        to="accounts.balai",
                        verbose_name="Balai",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="kabupatens",
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="Kabupaten",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="accounts.kabupaten",
            ),
        ),
        migrations.CreateModel(
            name="Link",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("provincial", "Provincial"),
                            ("kabupaten", "Kabupaten"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Link Status",
                    ),
                ),
                (
                    "link_code",
                    models.IntegerField(
                        blank=True, null=True, unique=True, verbose_name="Link Number"
                    ),
                ),
                (
                    "link_name",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Link Name"
                    ),
                ),
                (
                    "link_length_official",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Link Official Length (km)",
                    ),
                ),
                (
                    "link_length_actual",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Link Actual Length (km)",
                    ),
                ),
                (
                    "access_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("nasional", "Nasional"),
                            ("provinsi", "Provinsi"),
                            ("kabupaten", "Kabupaten"),
                            ("lokal", "Lokal"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Highest Link Access",
                    ),
                ),
                (
                    "function",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("kollector_4", "Kollector 4"),
                            ("kollector_2", "Kollector 2"),
                            ("kollector_3", "Kollector 3"),
                            ("arterial", "Arterial"),
                            ("lokal", "Lokal"),
                            ("lingkungan", "Lingkungan"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="Link Function",
                    ),
                ),
                (
                    "link_class",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("I", "10 tons"),
                            ("II", "10 tons"),
                            ("IIIA", "8 tons"),
                            ("IIIB", "5 tons"),
                            ("IIIC", "3.5 tons"),
                        ],
                        default="I",
                        max_length=10,
                        null=True,
                        verbose_name="Link Class",
                    ),
                ),
                ("wti", models.IntegerField(blank=True, null=True)),
                ("mca2", models.IntegerField(blank=True, null=True)),
                ("mca3", models.IntegerField(blank=True, null=True)),
                ("mca4", models.IntegerField(blank=True, null=True)),
                ("mca5", models.IntegerField(blank=True, null=True)),
                ("project_number", models.IntegerField(blank=True, null=True)),
                (
                    "cum_esa",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        verbose_name="Cumulative ESA",
                    ),
                ),
                (
                    "esa0",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        verbose_name="ESA0",
                    ),
                ),
                (
                    "aadt",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        verbose_name="Annual Average Daily Traffic",
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten Code",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="accounts.province",
                        verbose_name="Province Code",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CulvertInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chainage", models.FloatField(help_text="Chainage in kilometers")),
                (
                    "culvert_number",
                    models.CharField(
                        help_text="Culvert identification number", max_length=50
                    ),
                ),
                (
                    "culvert_length",
                    models.FloatField(help_text="Length of the culvert in meters"),
                ),
                (
                    "number_of_openings",
                    models.IntegerField(help_text="Number of openings in the culvert"),
                ),
                (
                    "culvert_type",
                    models.CharField(
                        choices=[
                            ("gorong_gorong_kotak", "Gorong-gorong Kotak"),
                            ("gorong_gorong_pipa_beton", "Gorong-gorong Pipa Beton"),
                            ("gorong_gorong_pelat_beton", "Gorong-gorong Pelat Beton"),
                            ("gorong_gorong_pipa_baja", "Gorong-gorong Pipa Baja"),
                            ("lainnya", "Lainnya"),
                            ("struktur_diprelu", "Struktur Diprelu"),
                        ],
                        help_text="Type of the culvert",
                        max_length=50,
                    ),
                ),
                (
                    "culvert_width",
                    models.FloatField(help_text="Width of the culvert in meters"),
                ),
                (
                    "culvert_height",
                    models.FloatField(help_text="Height of the culvert in meters"),
                ),
                (
                    "inlet_type",
                    models.CharField(
                        choices=[
                            ("non_stuktr", "Non Stuktr"),
                            ("apron_dan_tembok_sayap", "Apron dan Tembok Sayap"),
                            ("tembok_sayap", "Tembok Sayap"),
                            ("beronjong", "Beronjong"),
                            ("batu_kali", "Batu Kali"),
                            (
                                "langsung_ke_drainase_lainnya",
                                "Langsung ke Drainase Lainnya",
                            ),
                        ],
                        help_text="Type of inlet structure",
                        max_length=50,
                    ),
                ),
                (
                    "outlet_type",
                    models.CharField(
                        choices=[
                            ("non_stuktr", "Non Stuktr"),
                            ("apron_dan_tembok_sayap", "Apron dan Tembok Sayap"),
                            ("tembok_sayap", "Tembok Sayap"),
                            ("beronjong", "Beronjong"),
                            ("batu_kali", "Batu Kali"),
                            (
                                "langsung_ke_drainase_lainnya",
                                "Langsung ke Drainase Lainnya",
                            ),
                        ],
                        help_text="Type of outlet structure",
                        max_length=50,
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LinkKacematan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("drp_from", models.IntegerField(blank=True, null=True)),
                ("drp_to", models.IntegerField(blank=True, null=True)),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LinkKabupaten",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("drp_from", models.IntegerField(blank=True, null=True)),
                ("drp_to", models.IntegerField(blank=True, null=True)),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LinkClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "KmClass",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Kilometer Class"
                    ),
                ),
                (
                    "Class",
                    models.CharField(
                        choices=[
                            ("I", "10 tons"),
                            ("II", "10 tons"),
                            ("IIIA", "8 tons"),
                            ("IIIB", "5 tons"),
                            ("IIIC", "3.5 tons"),
                        ],
                        default="I",
                        max_length=10,
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CulvertCondition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "condition_barrel",
                    models.CharField(
                        choices=[
                            ("amat_baik", "Amat Baik"),
                            ("baik", "Baik"),
                            ("sedang", "Sedang"),
                            ("rusak_ringan", "Rusak Ringan"),
                            ("rusak_berat", "Rusak Berat"),
                            ("struktur_gagal", "Struktur Gagal"),
                            ("elemen_tak_dapat_disurvei", "Elemen Tak Dapat Disurvei"),
                        ],
                        help_text="The condition of the barrel",
                        max_length=50,
                        verbose_name="Condition Barrel",
                    ),
                ),
                (
                    "condition_inlet",
                    models.CharField(
                        choices=[
                            ("amat_baik", "Amat Baik"),
                            ("baik", "Baik"),
                            ("sedang", "Sedang"),
                            ("rusak_ringan", "Rusak Ringan"),
                            ("rusak_berat", "Rusak Berat"),
                            ("struktur_gagal", "Struktur Gagal"),
                            ("elemen_tak_dapat_disurvei", "Elemen Tak Dapat Disurvei"),
                        ],
                        help_text="The condition of the inlet",
                        max_length=50,
                        verbose_name="Condition Inlet",
                    ),
                ),
                (
                    "condition_outlet",
                    models.CharField(
                        choices=[
                            ("amat_baik", "Amat Baik"),
                            ("baik", "Baik"),
                            ("sedang", "Sedang"),
                            ("rusak_ringan", "Rusak Ringan"),
                            ("rusak_berat", "Rusak Berat"),
                            ("struktur_gagal", "Struktur Gagal"),
                            ("elemen_tak_dapat_disurvei", "Elemen Tak Dapat Disurvei"),
                        ],
                        help_text="The condition of the outlet",
                        max_length=50,
                        verbose_name="Condition Outlet",
                    ),
                ),
                (
                    "sitting",
                    models.CharField(
                        choices=[
                            ("tak_ada", "Tak Ada"),
                            ("sedikit", "Sedikit (<10 cm)"),
                            ("banyak", "Banyak (10-30 cm)"),
                            ("tersumbat", "Tersumbat"),
                        ],
                        help_text="The sitting condition",
                        max_length=50,
                        verbose_name="Sitting",
                    ),
                ),
                (
                    "overtopping",
                    models.BooleanField(
                        help_text="Indicates if overtopping is present",
                        verbose_name="Overtopping",
                    ),
                ),
                (
                    "surveyed_by",
                    models.CharField(
                        help_text="Name of the person who surveyed",
                        max_length=100,
                        verbose_name="Surveyed By",
                    ),
                ),
                (
                    "culvert_number",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.culvertinventory",
                        verbose_name="Culvert Number",
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="balai",
            name="province",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="accounts.province",
                verbose_name="Province",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="province",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="accounts.province",
            ),
        ),
        migrations.CreateModel(
            name="Retaining_walls",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "wall_side",
                    models.CharField(
                        choices=[("left", "Left"), ("right", "Right")],
                        max_length=20,
                        verbose_name="wall side",
                    ),
                ),
                (
                    "wall_material",
                    models.CharField(
                        choices=[
                            ("pasangan Batu", "pasangan batu"),
                            ("beton", "Beton"),
                            ("beronjong", "Beronjong"),
                            ("pelat beton", "Pelot Beton"),
                            ("lainnya", "Lainnya"),
                        ],
                        max_length=20,
                        verbose_name="wall material",
                    ),
                ),
                ("wall_height", models.IntegerField(blank=True, null=True)),
                ("chainage_from", models.IntegerField(blank=True, null=True)),
                ("wall_number", models.IntegerField(blank=True, null=True)),
                (
                    "wall_type",
                    models.CharField(
                        choices=[
                            ("tembok bukit", "Tembok bukit"),
                            ("tembok laut", "Tembok Laut"),
                            ("tembok sungai", "Tembok Sungai"),
                            ("lainnya", "Lainnya"),
                            ("struktur diperlu", "Struktur Diperlu"),
                        ],
                        max_length=20,
                        verbose_name="wall_type",
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Retaining_walls_Condition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wall_Mortar_needed", models.IntegerField(blank=True, null=True)),
                ("wall_repair_needed", models.IntegerField(blank=True, null=True)),
                ("wall_rebuiled_needed", models.IntegerField(blank=True, null=True)),
                (
                    "surveyed_by",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
                (
                    "wall_number",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.retaining_walls",
                        verbose_name="wall Number",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoadCondition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chainage_from", models.FloatField()),
                ("chainage_to", models.FloatField()),
                ("roughness", models.BooleanField(default=False)),
                ("road_marking_left", models.BooleanField(default=False)),
                ("road_marking_right", models.BooleanField(default=False)),
                ("analysis_base_year", models.BooleanField(default=False)),
                ("paved", models.BooleanField(default=False)),
                ("check_data", models.BooleanField(default=False)),
                ("bleeding_area", models.FloatField()),
                ("ravelling_area", models.FloatField()),
                ("desintegration_area", models.FloatField()),
                ("crack_dep_area", models.FloatField()),
                ("patching_area", models.FloatField()),
                ("oth_crack_area", models.FloatField()),
                ("pothole_area", models.FloatField()),
                ("rutting_area", models.FloatField()),
                ("edge_damage_area", models.FloatField()),
                ("crossfall_area", models.FloatField()),
                ("depressions_area", models.FloatField()),
                ("erosion_area", models.FloatField()),
                ("waviness_area", models.FloatField()),
                ("gravel_thickness_area", models.FloatField()),
                ("concrete_cracking_area", models.FloatField()),
                ("concrete_spalling_area", models.FloatField()),
                ("concrete_structural_cracking_area", models.FloatField()),
                (
                    "shoulder_left",
                    models.CharField(
                        choices=[
                            ("tidak_ada", "Tidak Ada"),
                            ("di_atas_perkerasan", "Di Atas Perkerasan"),
                            ("sama_tinggi", "Sama Tinggi Dengan Perkerasan"),
                            ("di_bawah_perkerasan", "Di Bawah Perkerasan"),
                            ("diperlukan_bahu_beton", "Diperlukan Bahu Beton"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "shoulder_right",
                    models.CharField(
                        choices=[
                            ("tidak_ada", "Tidak Ada"),
                            ("di_atas_perkerasan", "Di Atas Perkerasan"),
                            ("sama_tinggi", "Sama Tinggi Dengan Perkerasan"),
                            ("di_bawah_perkerasan", "Di Bawah Perkerasan"),
                            ("diperlukan_bahu_beton", "Diperlukan Bahu Beton"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "drain_left",
                    models.CharField(
                        choices=[
                            ("tersumbat", "Tersumbat"),
                            ("tidak_ada", "Tidak Ada"),
                            ("bersih", "Bersih"),
                            ("diperlukan_pasangan", "Diperlukan Drainase Pasangan"),
                            ("diperlukan_tanah", "Diperlukan Drainase Tanah"),
                            ("erosi", "Erosi"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "drain_right",
                    models.CharField(
                        choices=[
                            ("tersumbat", "Tersumbat"),
                            ("tidak_ada", "Tidak Ada"),
                            ("bersih", "Bersih"),
                            ("diperlukan_pasangan", "Diperlukan Drainase Pasangan"),
                            ("diperlukan_tanah", "Diperlukan Drainase Tanah"),
                            ("erosi", "Erosi"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "slope_left",
                    models.CharField(
                        choices=[("tidak_ada", "Tidak Ada"), ("runtuh", "Runtuh")],
                        max_length=50,
                    ),
                ),
                (
                    "slope_right",
                    models.CharField(
                        choices=[("tidak_ada", "Tidak Ada"), ("runtuh", "Runtuh")],
                        max_length=50,
                    ),
                ),
                (
                    "footpath_left",
                    models.CharField(
                        choices=[
                            ("tidak_ada", "Tidak Ada"),
                            ("baik_aman", "Baik/Aman"),
                            ("bahaya", "Bahaya"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "footpath_right",
                    models.CharField(
                        choices=[
                            ("tidak_ada", "Tidak Ada"),
                            ("baik_aman", "Baik/Aman"),
                            ("bahaya", "Bahaya"),
                        ],
                        max_length=50,
                    ),
                ),
                ("sign_left", models.FloatField()),
                ("sign_right", models.FloatField()),
                ("guidepost_left", models.FloatField()),
                ("guidepost_right", models.FloatField()),
                ("barrier_left", models.FloatField()),
                ("barrier_right", models.FloatField()),
                ("iri", models.FloatField()),
                ("rci", models.FloatField()),
                ("segment_tti", models.FloatField()),
                ("survey_by", models.CharField(max_length=255)),
                ("survey_date", models.DateField()),
                ("section_status", models.CharField(max_length=255)),
                (
                    "pavement",
                    models.CharField(
                        choices=[
                            ("asphalt", "Asphalt"),
                            ("concrete", "Concrete"),
                            ("unpaved", "Unpaved"),
                        ],
                        max_length=50,
                    ),
                ),
                ("concrete_corner_break_no", models.IntegerField()),
                ("concrete_pumping_no", models.IntegerField()),
                ("concrete_blowouts_area", models.FloatField()),
                (
                    "composition",
                    models.CharField(
                        choices=[("baik_rapat", "Baik/Rapat"), ("kasar", "Kasar")],
                        max_length=50,
                    ),
                ),
                (
                    "crack_type",
                    models.CharField(
                        choices=[
                            ("tidak_ada", "Tidak Ada"),
                            ("tidak_berhubungan", "Tidak Berhubungan"),
                            ("saling_berhubungan", "Saling Berhubungan"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "crack_width",
                    models.CharField(
                        choices=[
                            ("tidak_ada", "Tidak Ada"),
                            ("<1mm", "<1mm"),
                            ("1-5mm", "1-5mm"),
                            (">5mm", ">5mm"),
                        ],
                        max_length=50,
                    ),
                ),
                ("pothole_count", models.IntegerField()),
                (
                    "pothole_size",
                    models.CharField(
                        choices=[
                            ("tidak_ada", "Tidak Ada"),
                            ("kecil_dangkal", "Kecil-Dangkal"),
                            ("kecil_dalam", "Kecil-Dalam"),
                            ("besar_dangkal", "Besar-Dangkal"),
                            ("besar_dalam", "Besar-Dalam"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "rut_depth",
                    models.CharField(
                        choices=[
                            ("tidak_ada", "Tidak Ada"),
                            ("<1cm", "<1cm"),
                            ("1-3cm", "1-3cm"),
                            (">3cm", ">3cm"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "shoulder_cond_left",
                    models.CharField(
                        choices=[
                            ("tidak_ada", "Tidak Ada"),
                            ("baik_rata", "Baik/Rata"),
                            ("bekas_erosi_ringan", "Bekas RD/Erosi Ringan"),
                            ("bekas_erosi_berat", "Bekas RD/Erosi Berat"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "shoulder_cond_right",
                    models.CharField(
                        choices=[
                            ("tidak_ada", "Tidak Ada"),
                            ("baik_rata", "Baik/Rata"),
                            ("bekas_erosi_ringan", "Bekas RD/Erosi Ringan"),
                            ("bekas_erosi_berat", "Bekas RD/Erosi Berat"),
                        ],
                        max_length=50,
                    ),
                ),
                ("crossfall_shape", models.FloatField()),
                ("gravel_size", models.FloatField()),
                ("gravel_thickness", models.FloatField()),
                ("distribution", models.FloatField()),
                ("edge_damage_area_right", models.FloatField()),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="road_conditions",
                        to="accounts.kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="road_conditions",
                        to="accounts.link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="road_conditions",
                        to="accounts.province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoadInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chainage_from",
                    models.IntegerField(verbose_name="Chainage From (km)"),
                ),
                ("chainage_to", models.IntegerField(verbose_name="Chainage To (km)")),
                ("DRP_from", models.IntegerField(verbose_name="drp in (km)")),
                ("DRP_to", models.IntegerField()),
                ("offset_from", models.IntegerField()),
                ("offset_to", models.IntegerField()),
                ("pave_width", models.IntegerField()),
                ("row", models.IntegerField()),
                ("should_width_L", models.IntegerField()),
                ("should_width_R", models.IntegerField()),
                (
                    "pavement_type",
                    models.CharField(
                        choices=[
                            ("beton", "Beton"),
                            ("blok_beton", "Blok Beton"),
                            ("aspal", "Aspal"),
                            ("lapen", "Lapen"),
                            ("batu_kali", "Batu Kali"),
                            ("kerikil", "Kerikil"),
                            ("tanah", "Tanah"),
                        ],
                        max_length=20,
                        verbose_name="Pavement Type",
                    ),
                ),
                (
                    "shoulder_L_width",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Shoulder Left Width (m)"
                    ),
                ),
                (
                    "shoulder_L_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("beton", "Beton"),
                            ("blok_beton", "Blok Beton"),
                            ("aspal", "Aspal"),
                            ("lapen", "Lapen"),
                            ("batu_kali", "Batu Kali"),
                            ("kerikil", "Kerikil"),
                            ("tanah", "Tanah"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Shoulder Left Type",
                    ),
                ),
                (
                    "shoulder_R_width",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Shoulder Right Width (m)"
                    ),
                ),
                (
                    "shoulder_R_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("beton", "Beton"),
                            ("blok_beton", "Blok Beton"),
                            ("aspal", "Aspal"),
                            ("lapen", "Lapen"),
                            ("batu_kali", "Batu Kali"),
                            ("kerikil", "Kerikil"),
                            ("tanah", "Tanah"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Shoulder Right Type",
                    ),
                ),
                (
                    "drain_type_left",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("tak_ada", "Tak Ada"),
                            ("tak_perlu", "Tak Perlu"),
                            ("tanah", "Tanah"),
                            ("pasangan_batu_terbuka", "Pasangan Batu Terbuka"),
                            ("pasangan_batu_tertutup", "Pasangan Batu Tertutup"),
                        ],
                        max_length=30,
                        null=True,
                        verbose_name="Drain Type Left",
                    ),
                ),
                (
                    "drain_type_right",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("tak_ada", "Tak Ada"),
                            ("tak_perlu", "Tak Perlu"),
                            ("tanah", "Tanah"),
                            ("pasangan_batu_terbuka", "Pasangan Batu Terbuka"),
                            ("pasangan_batu_tertutup", "Pasangan Batu Tertutup"),
                        ],
                        max_length=30,
                        null=True,
                        verbose_name="Drain Type Right",
                    ),
                ),
                (
                    "land_use_left",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("tak_ada", "Tak Ada"),
                            ("agrikultur", "Agrikultur"),
                            ("desa", "Desa"),
                            ("kota", "Kota"),
                            ("hutan", "Hutan"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Land Use Left",
                    ),
                ),
                (
                    "land_use_right",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("tak_ada", "Tak Ada"),
                            ("agrikultur", "Agrikultur"),
                            ("desa", "Desa"),
                            ("kota", "Kota"),
                            ("hutan", "Hutan"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Land Use Right",
                    ),
                ),
                (
                    "terrain",
                    models.CharField(
                        choices=[
                            ("datar", "Datar"),
                            ("bukit", "Bukit"),
                            ("gunung", "Gunung"),
                        ],
                        max_length=20,
                        verbose_name="Terrain",
                    ),
                ),
                (
                    "impassable",
                    models.BooleanField(default=False, verbose_name="Impassable"),
                ),
                (
                    "reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("jembatan_runtuh", "Jembatan Runtuh"),
                            ("sungai_tanpa_jembatan", "Sungai Tanpa Jembatan"),
                            (
                                "tak_dapat_dilalui_musim",
                                "Tak Dapat Dilalui Selama Musim",
                            ),
                            ("lainnya", "Lainnya"),
                        ],
                        max_length=30,
                        null=True,
                        verbose_name="Reason",
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="role",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="users",
                to="accounts.role",
            ),
        ),
        migrations.CreateModel(
            name="Traffic_volume",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("missing_data", models.BooleanField()),
                (
                    "surveyed_by",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("survey_year", models.IntegerField(blank=True, null=True)),
                ("journey_time", models.TimeField()),
                (
                    "traffic_count",
                    models.CharField(
                        choices=[
                            ("stationary", "Stationary"),
                            ("moving count", "Moving count"),
                        ],
                        default=True,
                        max_length=20,
                        verbose_name="traffic count",
                    ),
                ),
                ("AADT_MC", models.BigIntegerField(blank=True, null=True)),
                ("AADT_Car", models.BigIntegerField(blank=True, null=True)),
                ("AADT_Pickup", models.BigIntegerField(blank=True, null=True)),
                ("AADT_Small_Bus", models.BigIntegerField(blank=True, null=True)),
                ("AADT_Large_Bus", models.BigIntegerField(blank=True, null=True)),
                ("AADT_Microtruk", models.BigIntegerField(blank=True, null=True)),
                ("AADT_small_truck", models.BigIntegerField(blank=True, null=True)),
                ("AADT_medium_truck", models.BigIntegerField(blank=True, null=True)),
                ("AADT_large_truck", models.BigIntegerField(blank=True, null=True)),
                ("AADT_truck_trailer", models.BigIntegerField(blank=True, null=True)),
                ("AADT_semi_trailer", models.BigIntegerField(blank=True, null=True)),
                (
                    "kabupaten",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DRP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "drp_number",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        unique=True,
                        verbose_name="DRP Number",
                    ),
                ),
                (
                    "chainage",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Chainage"
                    ),
                ),
                (
                    "drp_length",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="DRP Length"
                    ),
                ),
                (
                    "drp_type",
                    models.CharField(
                        choices=[
                            ("link_start", "Link Start"),
                            ("link_end", "Link End"),
                            ("km_post_existing", "KM Post - Existing"),
                            ("km_post_temporary", "KM Post - Temporary"),
                            ("pain", "Pain"),
                            ("junction", "Junction"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                        verbose_name="DRP Type",
                    ),
                ),
                (
                    "drp_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="DRP Description"
                    ),
                ),
                (
                    "comment",
                    models.TextField(blank=True, null=True, verbose_name="Comment"),
                ),
                ("gps_north_degree", models.IntegerField(verbose_name="North Degree")),
                ("gps_north_minute", models.IntegerField(verbose_name="North Minute")),
                ("gps_north_second", models.FloatField(verbose_name="North Second")),
                ("gps_east_degree", models.IntegerField(verbose_name="East Degree")),
                ("gps_east_minute", models.IntegerField(verbose_name="East Minute")),
                ("gps_east_second", models.FloatField(verbose_name="East Second")),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
            options={
                "verbose_name": "DRP",
                "verbose_name_plural": "DRPs",
                "unique_together": {("drp_number", "chainage")},
            },
        ),
    ]
