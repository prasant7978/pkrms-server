# Generated by Django 5.0.3 on 2025-01-02 07:34

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Balai",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Balai Name")),
                ("balai_code", models.BigIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ConditionYear",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.PositiveIntegerField(verbose_name="Survey Year")),
            ],
        ),
        migrations.CreateModel(
            name="CorridorName",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Corridor Name"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PriorityArea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Priority Area Name"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role_name",
                    models.CharField(
                        choices=[
                            ("superadmin", "Super Admin"),
                            ("pfid", "PFID"),
                            ("balai_lg", "Balai LG"),
                            ("provience_lg", "Provincial LG"),
                            ("kabupaten_lg", "Kabupaten LG"),
                        ],
                        default="pfid",
                        max_length=20,
                        unique=True,
                        verbose_name="Role",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Traffic_weighting_factors",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("Car_WTI_FACTOR", models.BigIntegerField()),
                ("Car_VDF_Factor", models.BigIntegerField()),
                ("Large_bus_WTI_FACTOR", models.BigIntegerField()),
                ("Large_bus_VDF_Factor", models.BigIntegerField()),
                ("Large_truck_WTI_FACTOR", models.BigIntegerField()),
                ("Large_truck_VDF_Factor", models.BigIntegerField()),
                ("MC_WTI_FACTOR", models.BigIntegerField()),
                ("MC_VDF_Factor", models.BigIntegerField()),
                ("MEDIUM_TRUCK_WTI_FACTOR", models.BigIntegerField()),
                ("MEDIUM_TRUCK_VDF_Factor", models.BigIntegerField()),
                ("Microtruk_WTI_FACTOR", models.BigIntegerField()),
                ("Microtruk_VDF_Factor", models.BigIntegerField()),
                ("Pickup_WTI_FACTOR", models.BigIntegerField()),
                ("Pickup_VDF_Factor", models.BigIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="Kabupaten",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Kabupaten Name"),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=10, unique=True, verbose_name="Kabupaten Code"
                    ),
                ),
                (
                    "default_kabupaten",
                    models.BooleanField(
                        default=False, verbose_name="Default Kabupaten"
                    ),
                ),
                (
                    "stable_network_objective",
                    models.TextField(verbose_name="Stable Network Objective"),
                ),
                (
                    "balai",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="kabupatens",
                        to="accounts.balai",
                        verbose_name="Balai",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Link",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("provincial", "Provincial"),
                            ("Kabupaten", "Kabupaten"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Link Status",
                    ),
                ),
                (
                    "link_number",
                    models.IntegerField(
                        blank=True, null=True, unique=True, verbose_name="Link Number"
                    ),
                ),
                (
                    "link_name",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Link Name"
                    ),
                ),
                (
                    "official_length_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Link Official Length (km)",
                    ),
                ),
                (
                    "actual_length_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Link Actual Length (km)",
                    ),
                ),
                (
                    "highest_access",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("nasional", "Nasional"),
                            ("provinsi", "Provinsi"),
                            ("kabupaten", "Kabupaten"),
                            ("lokal", "Lokal"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Highest Link Access",
                    ),
                ),
                (
                    "link_function",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("kollector_4", "Kollector 4"),
                            ("kollector_2", "Kollector 2"),
                            ("kollector_3", "Kollector 3"),
                            ("arterial", "Arterial"),
                            ("lokal", "Lokal"),
                            ("lingkungan", "Lingkungan"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="Link Function",
                    ),
                ),
                (
                    "corridor_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.corridorname",
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten Code",
                    ),
                ),
                (
                    "priority_area",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.priorityarea",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CorridorLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="corridor_links",
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Province",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=10, unique=True, verbose_name="Province Code"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Province Name"),
                ),
                (
                    "default_province",
                    models.BooleanField(default=False, verbose_name="Default Province"),
                ),
                (
                    "stable_network_objective",
                    models.TextField(verbose_name="Stable Network Objective"),
                ),
                (
                    "balai",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.balai",
                        verbose_name="BALAI",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Periodic_UnitCost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("kabupaten", "Kabupaten"),
                        ],
                        default=True,
                        max_length=20,
                        verbose_name="Link Status",
                    ),
                ),
                ("overlay_thickness", models.IntegerField()),
                ("periodic_maintenance_unit_cost", models.FloatField()),
                (
                    "kabupaten",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MCAcriteria",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("kabupataen", "Kabupataen"),
                        ],
                        max_length=20,
                        verbose_name="Link Status",
                    ),
                ),
                (
                    "link_number",
                    models.IntegerField(
                        blank=True, null=True, unique=True, verbose_name="Link Number"
                    ),
                ),
                (
                    "MCA_1",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "MCA_2",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "MCA_3",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "MCA_4",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LinkKacematan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("Kabupaten", "Kabupaten"),
                        ],
                        max_length=20,
                    ),
                ),
                ("drp_from", models.IntegerField(blank=True, null=True)),
                ("drp_to", models.IntegerField(blank=True, null=True)),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LinkKabupaten",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("Kabupaten", "Kabupaten"),
                        ],
                        max_length=20,
                    ),
                ),
                ("drp_from", models.IntegerField(blank=True, null=True)),
                ("drp_to", models.IntegerField(blank=True, null=True)),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LinkClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_length", models.IntegerField(blank=True, null=True)),
                (
                    "unit",
                    models.CharField(
                        default="km", max_length=10, verbose_name="Unit of Measurement"
                    ),
                ),
                (
                    "link_class",
                    models.CharField(
                        choices=[
                            ("I", "10 tons"),
                            ("II", "10 tons"),
                            ("IIIA", "8 tons"),
                            ("IIIB", "5 tons"),
                            ("IIIC", "3.5 tons"),
                        ],
                        default="I",
                        max_length=10,
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="link",
            name="province",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="links",
                to="accounts.province",
                verbose_name="Province Code",
            ),
        ),
        migrations.AddField(
            model_name="kabupaten",
            name="province",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="kabupatens",
                to="accounts.province",
                verbose_name="Province",
            ),
        ),
        migrations.CreateModel(
            name="CulvertInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("kabupataen", "Kabupataen"),
                        ],
                        max_length=20,
                        verbose_name="Link Status",
                    ),
                ),
                ("chainage", models.FloatField(help_text="Chainage in kilometers")),
                (
                    "culvert_number",
                    models.CharField(
                        help_text="Culvert identification number", max_length=50
                    ),
                ),
                (
                    "culvert_length",
                    models.FloatField(help_text="Length of the culvert in meters"),
                ),
                (
                    "number_of_openings",
                    models.IntegerField(help_text="Number of openings in the culvert"),
                ),
                (
                    "culvert_type",
                    models.CharField(
                        choices=[
                            ("gorong_gorong_kotak", "Gorong-gorong Kotak"),
                            ("gorong_gorong_pipa_beton", "Gorong-gorong Pipa Beton"),
                            ("gorong_gorong_pelat_beton", "Gorong-gorong Pelat Beton"),
                            ("gorong_gorong_pipa_baja", "Gorong-gorong Pipa Baja"),
                            ("lainnya", "Lainnya"),
                            ("struktur_diprelu", "Struktur Diprelu"),
                        ],
                        help_text="Type of the culvert",
                        max_length=50,
                    ),
                ),
                (
                    "culvert_width",
                    models.FloatField(help_text="Width of the culvert in meters"),
                ),
                (
                    "culvert_height",
                    models.FloatField(help_text="Height of the culvert in meters"),
                ),
                (
                    "inlet_type",
                    models.CharField(
                        choices=[
                            ("non_stuktr", "Non Stuktr"),
                            ("apron_dan_tembok_sayap", "Apron dan Tembok Sayap"),
                            ("tembok_sayap", "Tembok Sayap"),
                            ("beronjong", "Beronjong"),
                            ("batu_kali", "Batu Kali"),
                            (
                                "langsung_ke_drainase_lainnya",
                                "Langsung ke Drainase Lainnya",
                            ),
                        ],
                        help_text="Type of inlet structure",
                        max_length=50,
                    ),
                ),
                (
                    "outlet_type",
                    models.CharField(
                        choices=[
                            ("non_stuktr", "Non Stuktr"),
                            ("apron_dan_tembok_sayap", "Apron dan Tembok Sayap"),
                            ("tembok_sayap", "Tembok Sayap"),
                            ("beronjong", "Beronjong"),
                            ("batu_kali", "Batu Kali"),
                            (
                                "langsung_ke_drainase_lainnya",
                                "Langsung ke Drainase Lainnya",
                            ),
                        ],
                        help_text="Type of outlet structure",
                        max_length=50,
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CulvertCondition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("kabupaten", "Kabupaten"),
                        ],
                        help_text="The status of the link (e.g., Provincial or Kabupaten)",
                        max_length=20,
                        verbose_name="Link Status",
                    ),
                ),
                (
                    "condition_barrel",
                    models.CharField(
                        choices=[
                            ("amat_baik", "Amat Baik"),
                            ("baik", "Baik"),
                            ("sedang", "Sedang"),
                            ("rusak_ringan", "Rusak Ringan"),
                            ("rusak_berat", "Rusak Berat"),
                            ("struktur_gagal", "Struktur Gagal"),
                            ("elemen_tak_dapat_disurvei", "Elemen Tak Dapat Disurvei"),
                        ],
                        help_text="The condition of the barrel",
                        max_length=50,
                        verbose_name="Condition Barrel",
                    ),
                ),
                (
                    "condition_inlet",
                    models.CharField(
                        choices=[
                            ("amat_baik", "Amat Baik"),
                            ("baik", "Baik"),
                            ("sedang", "Sedang"),
                            ("rusak_ringan", "Rusak Ringan"),
                            ("rusak_berat", "Rusak Berat"),
                            ("struktur_gagal", "Struktur Gagal"),
                            ("elemen_tak_dapat_disurvei", "Elemen Tak Dapat Disurvei"),
                        ],
                        help_text="The condition of the inlet",
                        max_length=50,
                        verbose_name="Condition Inlet",
                    ),
                ),
                (
                    "condition_outlet",
                    models.CharField(
                        choices=[
                            ("amat_baik", "Amat Baik"),
                            ("baik", "Baik"),
                            ("sedang", "Sedang"),
                            ("rusak_ringan", "Rusak Ringan"),
                            ("rusak_berat", "Rusak Berat"),
                            ("struktur_gagal", "Struktur Gagal"),
                            ("elemen_tak_dapat_disurvei", "Elemen Tak Dapat Disurvei"),
                        ],
                        help_text="The condition of the outlet",
                        max_length=50,
                        verbose_name="Condition Outlet",
                    ),
                ),
                (
                    "sitting",
                    models.CharField(
                        choices=[
                            ("tak_ada", "Tak Ada"),
                            ("sedikit", "Sedikit (<10 cm)"),
                            ("banyak", "Banyak (10-30 cm)"),
                            ("tersumbat", "Tersumbat"),
                        ],
                        help_text="The sitting condition",
                        max_length=50,
                        verbose_name="Sitting",
                    ),
                ),
                (
                    "overtopping",
                    models.BooleanField(
                        help_text="Indicates if overtopping is present",
                        verbose_name="Overtopping",
                    ),
                ),
                (
                    "surveyed_by",
                    models.CharField(
                        help_text="Name of the person who surveyed",
                        max_length=100,
                        verbose_name="Surveyed By",
                    ),
                ),
                (
                    "condition_year",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.conditionyear",
                        verbose_name="Condition Year",
                    ),
                ),
                (
                    "culvert_number",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.culvertinventory",
                        verbose_name="Culvert Number",
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Retaining_walls",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("kabupaten", "Kabupaten"),
                        ],
                        default=True,
                        max_length=20,
                        verbose_name="Link Status",
                    ),
                ),
                (
                    "wall_side",
                    models.CharField(
                        choices=[("left", "Left"), ("right", "Right")],
                        max_length=20,
                        verbose_name="wall side",
                    ),
                ),
                (
                    "wall_material",
                    models.CharField(
                        choices=[
                            ("pasangan Batu", "pasangan batu"),
                            ("beton", "Beton"),
                            ("beronjong", "Beronjong"),
                            ("pelat beton", "Pelot Beton"),
                            ("lainnya", "Lainnya"),
                        ],
                        max_length=20,
                        verbose_name="wall material",
                    ),
                ),
                ("wall_height", models.IntegerField(blank=True, null=True)),
                ("chainage_from", models.IntegerField(blank=True, null=True)),
                ("wall_number", models.IntegerField(blank=True, null=True)),
                (
                    "wall_type",
                    models.CharField(
                        choices=[
                            ("tembok bukit", "Tembok bukit"),
                            ("tembok laut", "Tembok Laut"),
                            ("tembok sungai", "Tembok Sungai"),
                            ("lainnya", "Lainnya"),
                            ("struktur diperlu", "Struktur Diperlu"),
                        ],
                        max_length=20,
                        verbose_name="wall_type",
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Retaining_walls_Condition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("kabupaten", "Kabupaten"),
                        ],
                        default=True,
                        max_length=20,
                        verbose_name="Link Status",
                    ),
                ),
                ("wall_Mortar_needed", models.IntegerField(blank=True, null=True)),
                ("wall_repair_needed", models.IntegerField(blank=True, null=True)),
                ("wall_rebuiled_needed", models.IntegerField(blank=True, null=True)),
                (
                    "surveyed_by",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "condition_year",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.conditionyear",
                        verbose_name="Condition Year",
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
                (
                    "wall_number",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.retaining_walls",
                        verbose_name="wall Number",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoadCondition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("kabupataen", "Kabupataen"),
                        ],
                        max_length=20,
                        verbose_name="Link Status",
                    ),
                ),
                (
                    "survey_year",
                    models.PositiveIntegerField(verbose_name="Survey Year"),
                ),
                (
                    "manual_data_entry",
                    models.TextField(
                        blank=True, null=True, verbose_name="Manual Data Entry Survey"
                    ),
                ),
                (
                    "condition_year",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.conditionyear",
                        verbose_name="Condition Year",
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoadInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("Kabupaten", "Kabupaten"),
                        ],
                        max_length=20,
                    ),
                ),
                ("chainage_from", models.FloatField(verbose_name="Chainage From")),
                ("chainage_to", models.FloatField(verbose_name="Chainage To")),
                (
                    "row_subtype_width",
                    models.FloatField(verbose_name="Row Subtype Width (m)"),
                ),
                (
                    "pavement_subtype_width",
                    models.FloatField(verbose_name="Pavement Subtype Width (m)"),
                ),
                (
                    "pavement_type",
                    models.CharField(
                        choices=[
                            ("beton", "Beton"),
                            ("blok_beton", "Blok Beton"),
                            ("aspal", "Aspal"),
                            ("lapen", "Lapen"),
                            ("batu_kali", "Batu Kali"),
                            ("keriki", "Keriki"),
                            ("tanah", "Tanah"),
                        ],
                        default="beton",
                        max_length=20,
                        verbose_name="Pavement Type",
                    ),
                ),
                (
                    "shoulder_L_subtype_width",
                    models.FloatField(verbose_name="Shoulder-L Subtype Width (m)"),
                ),
                (
                    "shoulder_L_type",
                    models.CharField(
                        choices=[
                            ("beton", "Beton"),
                            ("blok_beton", "Blok Beton"),
                            ("aspal", "Aspal"),
                            ("lapen", "Lapen"),
                            ("batu_kali", "Batu Kali"),
                            ("keriki", "Keriki"),
                            ("tanah", "Tanah"),
                        ],
                        default="beton",
                        max_length=20,
                        verbose_name="Shoulder-L Type",
                    ),
                ),
                (
                    "shoulder_R_subtype_width",
                    models.FloatField(verbose_name="Shoulder-R Subtype Width (m)"),
                ),
                (
                    "shoulder_R_type",
                    models.CharField(
                        choices=[
                            ("beton", "Beton"),
                            ("blok_beton", "Blok Beton"),
                            ("aspal", "Aspal"),
                            ("lapen", "Lapen"),
                            ("batu_kali", "Batu Kali"),
                            ("keriki", "Keriki"),
                            ("tanah", "Tanah"),
                        ],
                        default="beton",
                        max_length=20,
                        verbose_name="Shoulder-R Type",
                    ),
                ),
                (
                    "drain_type_left",
                    models.CharField(
                        choices=[
                            ("tak_ada", "Tak Ada"),
                            ("tak_perlu", "Tak Perlu"),
                            ("tanha", "Tanha"),
                            ("pasangan_batu_terbuka", "Pasangan Batu Terbuka"),
                            ("pasangan_batu_tertutup", "Pasangan Batu Tertutup"),
                        ],
                        default="tak_ada",
                        max_length=30,
                        verbose_name="Drain Type Left",
                    ),
                ),
                (
                    "drain_type_right",
                    models.CharField(
                        choices=[
                            ("tak_ada", "Tak Ada"),
                            ("tak_perlu", "Tak Perlu"),
                            ("tanha", "Tanha"),
                            ("pasangan_batu_terbuka", "Pasangan Batu Terbuka"),
                            ("pasangan_batu_tertutup", "Pasangan Batu Tertutup"),
                        ],
                        default="tak_ada",
                        max_length=30,
                        verbose_name="Drain Type Right",
                    ),
                ),
                (
                    "land_use_left",
                    models.CharField(
                        choices=[
                            ("tak_ada", "Tak Ada"),
                            ("agrikultur", "Agrikultur"),
                            ("desa", "Desa"),
                            ("kota", "Kota"),
                            ("hutan", "Hutan"),
                        ],
                        default="tak_ada",
                        max_length=30,
                        verbose_name="Land Use Left",
                    ),
                ),
                (
                    "land_use_right",
                    models.CharField(
                        choices=[
                            ("tak_ada", "Tak Ada"),
                            ("agrikultur", "Agrikultur"),
                            ("desa", "Desa"),
                            ("kota", "Kota"),
                            ("hutan", "Hutan"),
                        ],
                        default="tak_ada",
                        max_length=30,
                        verbose_name="Land Use Right",
                    ),
                ),
                (
                    "terrain",
                    models.CharField(
                        choices=[
                            ("datar", "Datar"),
                            ("bukit", "Bukit"),
                            ("gunung", "Gunung"),
                        ],
                        default="datar",
                        max_length=20,
                        verbose_name="Terrain Type",
                    ),
                ),
                (
                    "impassable",
                    models.BooleanField(default=False, verbose_name="Impassable"),
                ),
                (
                    "impassable_reason",
                    models.CharField(
                        choices=[
                            ("jembatan_runtuh", "Jembatan Runtuh"),
                            ("dungsitapna_jembatan", "Dungsitapna Jembatan"),
                            (
                                "tak_dapat_dilalui_selama_musim",
                                "Tak Dapat Dilalui Selama Musim",
                            ),
                            ("lainnya", "Lainnya"),
                        ],
                        default="lainnya",
                        max_length=50,
                        verbose_name="Impassable Reason",
                    ),
                ),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("username", models.CharField(max_length=30, unique=True)),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Full Name"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("approved", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "balai",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.balai",
                    ),
                ),
                (
                    "Kabupaten",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="accounts.role",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Traffic_volume",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_status",
                    models.CharField(
                        choices=[
                            ("provincial", "Provincial"),
                            ("kabupaten", "Kabupaten"),
                        ],
                        default=True,
                        max_length=20,
                        verbose_name="Link Status",
                    ),
                ),
                ("missing_data", models.BooleanField()),
                (
                    "surveyed_by",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("survey_year", models.IntegerField(blank=True, null=True)),
                ("journey_time", models.TimeField()),
                (
                    "traffic_count",
                    models.CharField(
                        choices=[
                            ("stationary", "Stationary"),
                            ("moving count", "Moving count"),
                        ],
                        default=True,
                        max_length=20,
                        verbose_name="traffic count",
                    ),
                ),
                ("AADT_MC", models.BigIntegerField(blank=True, null=True)),
                ("AADT_Car", models.BigIntegerField(blank=True, null=True)),
                ("AADT_Pickup", models.BigIntegerField(blank=True, null=True)),
                ("AADT_Small_Bus", models.BigIntegerField(blank=True, null=True)),
                ("AADT_Large_Bus", models.BigIntegerField(blank=True, null=True)),
                ("AADT_Microtruk", models.BigIntegerField(blank=True, null=True)),
                ("AADT_small_truck", models.BigIntegerField(blank=True, null=True)),
                ("AADT_medium_truck", models.BigIntegerField(blank=True, null=True)),
                ("AADT_large_truck", models.BigIntegerField(blank=True, null=True)),
                ("AADT_truck_trailer", models.BigIntegerField(blank=True, null=True)),
                ("AADT_semi_trailer", models.BigIntegerField(blank=True, null=True)),
                (
                    "kabupaten",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        default=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DRP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "drp_number",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        unique=True,
                        verbose_name="DRP Number",
                    ),
                ),
                (
                    "chainage",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Chainage"
                    ),
                ),
                (
                    "drp_length",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="DRP Length"
                    ),
                ),
                (
                    "drp_type",
                    models.CharField(
                        choices=[
                            ("link_start", "Link Start"),
                            ("link_end", "Link End"),
                            ("km_post_existing", "KM Post - Existing"),
                            ("km_post_temporary", "KM Post - Temporary"),
                            ("pain", "Pain"),
                            ("junction", "Junction"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                        verbose_name="DRP Type",
                    ),
                ),
                (
                    "drp_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="DRP Description"
                    ),
                ),
                (
                    "comment",
                    models.TextField(blank=True, null=True, verbose_name="Comment"),
                ),
                ("gps_north_degree", models.IntegerField(verbose_name="North Degree")),
                ("gps_north_minute", models.IntegerField(verbose_name="North Minute")),
                ("gps_north_second", models.FloatField(verbose_name="North Second")),
                ("gps_east_degree", models.IntegerField(verbose_name="East Degree")),
                ("gps_east_minute", models.IntegerField(verbose_name="East Minute")),
                ("gps_east_second", models.FloatField(verbose_name="East Second")),
                (
                    "kabupaten",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.kabupaten",
                        verbose_name="Kabupaten",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.province",
                        verbose_name="Province",
                    ),
                ),
            ],
            options={
                "verbose_name": "DRP",
                "verbose_name_plural": "DRPs",
                "unique_together": {("drp_number", "chainage")},
            },
        ),
    ]
